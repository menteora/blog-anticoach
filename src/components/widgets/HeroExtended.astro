---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="pt-0 md:pt-[76px] pointer-events-none"></div>
    <div>

      <!-- Sovrapposizione titolo con sfondo -->
      <div class="absolute inset-x-0 top-1/4 z-20 flex justify-center px-4 -translate-y-1/2">
        <div class="bg-black/70 backdrop-blur-sm rounded-lg px-4 sm:px-6 py-4 max-w-3xl text-center">
          {title && (
            <h1
              class="text-3xl sm:text-4xl md:text-5xl font-bold leading-tight tracking-tight mb-2 font-heading text-white intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={title}
            />
          )}
          {subtitle && (
            <p
              class="text-base sm:text-lg md:text-xl text-gray-300 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
              set:html={subtitle}
            />
          )}
        </div>
      </div>

      <!-- Immagine responsiva con proporzioni -->
      <div
        class="intersect-once intercept-no-queue intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        {
          image && (
            <div class="relative m-auto max-w-[90rem] px-4 aspect-[16/9]">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full h-full max-w-full object-contain"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={1024}
                  {...image}
                />
              )}
            </div>
          )}
      </div>

      <!-- Altri contenuti (actions, content) -->
      <div class="relative z-10 text-center max-w-5xl mx-auto mt-10 md:mt-20">
        {
          actions && (
            <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-4 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
              {Array.isArray(actions) ? (
                actions.map((action) => (
                  <div class="flex w-full sm:w-auto">
                    <Button {...(action || {})} class="w-full sm:mb-0" />
                  </div>
                ))
              ) : (
                <Fragment set:html={actions} />
              )}
            </div>
          )}

        {content && <Fragment set:html={content} />}
      </div>
    </div>
  </div>
</section>
